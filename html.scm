(define maketag (lambda (tag param str)
  (string-append "<" tag (if (eq? param '()) "" (car (map (lambda (x) (string-append " " (car x) "=\"" (cdr x) "\"") ) param ))) ">\n" str "</" tag ">\n")
  )
)
(define-syntax l2e (syntax-rules() ((l2e x y)(eval `(x ,@y) (interaction-environment)))))
(define (makeorphantag tagstring) (string-append "<" tagstring ">\n"))
(define (makefunctag tagstring) (eval (with-input-from-string (string-append 
"(define (" tagstring " string) (maketag \"" tagstring "\" '() string))")
 (lambda () (read))) (interaction-environment)))
(define (makefunctagbylist list) (map makefunctag list))
(define header "Content-Type: text/plain;\n")
(makefunctagbylist '("head" "title" "html" "body" "b" "p" "h1" "h2" "h3" "h4" "h5" "h6"))
(define (br) (makeorphantag "/br"))
(define (a string url) (maketag "a" `(("href" . ,url)) string))
(define (ul terms) (maketag "ul" '() (l2e string-append (map (lambda (x) (maketag "li" '() x)) terms))))
(define (ol terms) (maketag "ol" '() (l2e string-append (map (lambda (x) (maketag "li" '() x)) terms))))
;(define (loadcss URL) (maketag "link" '() 
(define form '())
